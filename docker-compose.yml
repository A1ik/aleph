version: "2"

services:
  postgres:
    image: postgres:10.0
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER:     aleph
      POSTGRES_PASSWORD: aleph
      POSTGRES_DATABASE: aleph

  elasticsearch:
    image: alephdata/elasticsearch:6.2.4-vendor0
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-log:/var/log

  rabbitmq:
    image: rabbitmq
    hostname: queue
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  unoservice:
    image: alephdata/unoservice:1.2.1
    scale: 3
    tmpfs:
      - /tmp
      - /root/.config
    restart: on-failure
    expose:
      - 3000

  worker:
    build: .
    command: celery -A aleph.queues -B -c 1 -l INFO worker
    scale: 4
    restart: on-failure
    links:
      - postgres
      - elasticsearch
      - rabbitmq
      - unoservice
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - polyglot:/polyglot
    env_file:
      - aleph.env
  
  shell:
    build: .
    command: /bin/bash
    scale: 2
    links:
      - postgres
      - elasticsearch
      - rabbitmq
      - unoservice
      - worker
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - polyglot:/polyglot
      - "./mappings:/aleph/mappings"
      - "/:/host"
    env_file:
      - aleph.env

  beat:
    build: .
    command: celery -A aleph.queues beat -s /var/lib/celerybeat-schedule.db
    links:
      - postgres
      - elasticsearch
      - rabbitmq
      - worker
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - polyglot:/polyglot
    env_file:
      - aleph.env

  api:
    build: .
    command: gunicorn -w 8 -b 0.0.0.0:8000 --log-level info --log-file /var/log/gunicorn.log aleph.manage:app
    expose:
      - 8000
    links:
      - postgres
      - elasticsearch
      - rabbitmq
      - worker
    tmpfs: /tmp
    volumes:
      - archive-data:/data
      - polyglot:/polyglot
    env_file:
      - aleph.env

  ui:
    build: ui
    command: /bin/bash -c "npm run build; tail -f /dev/null"
    volumes:
      - assets:/alephui/build
    environment:
      REACT_APP_API_ENDPOINT: '/api/2'

  web:
    image: nginx:alpine
    links:
      - api
      - ui
    ports:
      - "8080:8080"
    volumes:
      - assets:/assets
      - "./contrib/proxy.conf:/etc/nginx/nginx.conf"

volumes:
  assets: {}
  archive-data: {}
  polyglot: {}
  postgres-data: {}
  rabbitmq-data: {}
  elasticsearch-data: {}
  elasticsearch-log: {}