import logging
from datetime import datetime

from aleph.core import db, url_for
from aleph.model.role import Role
from aleph.model.schema_model import SchemaModel
from aleph.model.permission import Permission
from aleph.model.common import SoftDeleteModel, IdModel, make_token

log = logging.getLogger(__name__)


class Collection(db.Model, IdModel, SoftDeleteModel, SchemaModel):
    _schema = 'collection.json#'

    label = db.Column(db.Unicode)
    category = db.Column(db.Unicode, nullable=True)
    foreign_id = db.Column(db.Unicode, unique=True, nullable=False)

    # managed collections are generated by API bots and thus UI users
    # shouldn't be encouraged to add entities or documents to them.
    managed = db.Column(db.Boolean, default=False)
    generate_entities = db.Column(db.Boolean, nullable=True, default=False)

    creator_id = db.Column(db.Integer, db.ForeignKey('role.id'), nullable=True)
    creator = db.relationship(Role)

    def update(self, data):
        self.schema_update(data)

    def delete(self, deleted_at=None):
        deleted_at = deleted_at or datetime.utcnow()
        for entity in self.entities:
            if len(list(entity.collections)) == 1:
                entity.delete(deleted_at=deleted_at)
        super(Collection, self).delete(deleted_at=deleted_at)

    def touch(self):
        self.updated_at = datetime.utcnow()
        db.session.add(self)

    @classmethod
    def by_foreign_id(cls, foreign_id):
        if foreign_id is None:
            return
        return cls.all().filter(cls.foreign_id == foreign_id).first()

    @classmethod
    def create(cls, data, role=None):
        foreign_id = data.get('foreign_id') or make_token()
        collection = cls.by_foreign_id(foreign_id)
        if collection is None:
            collection = cls()
            collection.foreign_id = foreign_id
            collection.creator = role
            collection.update(data)
            db.session.add(collection)
            db.session.flush()

            if role is not None:
                Permission.grant_resource(Permission.COLLECTION,
                                          collection.id,
                                          role, True, True)
        return collection

    def __repr__(self):
        return '<Collection(%r, %r)>' % (self.id, self.label)

    def __unicode__(self):
        return self.label

    def to_dict(self):
        data = super(Collection, self).to_dict()
        data['api_url'] = url_for('collections_api.view', id=self.id)
        data['foreign_id'] = self.foreign_id
        data['creator_id'] = self.creator_id
        return data
