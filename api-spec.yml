openapi: 3.0.0
info:
  contact:
    url: 'https://github.com/alephdata/aleph'
  description: >
    Aleph is a powerful tool for people who follow the money. It helps
    investigators to securely access and search large amounts of data - no
    matter whether they are a government database or a leaked email archive.

    # General Overview

    The Aleph web interface is powered by a Flask HTTP API. Aleph supports an
    extensive API for searching documents and entities. It can also be used to
    retrieve raw metadata, source documents and other useful details. Aleph's
    API tries to follow a pragmatic approach based on the following principles:

    - All API calls are prefixed with an API version; this version is `/api/2/`.

    - Responses and requests are both encoded as JSON. Requests should have the
    `Content-Type` and `Accept` headers set to `application/json`.

    - The application uses Representational State Transfer (REST) principles
    where convenient, but also has some procedural API calls.

    - The API allows API Authorization via an API key or JSON Web Tokens.

    # Authentication and Authorization

    By default, any Aleph search will return only public documents in responses
    to API requests.

    If you want to access documents which are not marked public, you will need
    to sign into the tool. This can be done through the use on an **API key**.
    The API key for any account can be found by clicking on the "Profile" menu
    item in the navigation menu.

    The API key must be sent on all queries using the `Authorization` HTTP
    header:

    ```Authorization: ApiKey 363af1e2b03b41c6b3adc604956e2f66```

    Alternatively, the API key can also be sent as a query parameter under the
    `api_key` key.

    Similarly, a JWT can be sent in the Authorization header, after it has been
    returned by the login and/or OAuth processes. Aleph does not use session
    cookies or any other type of stateful API.
  license:
    name: MIT
    url: 'https://github.com/alephdata/aleph/blob/master/LICENSE.txt'
  title: Aleph API Documentation
  version: 3.2.11
  x-logo:
    altText: Aleph logo
    url: 'https://avatars3.githubusercontent.com/u/26249985?s=200&v=4'
servers:
  - url: 'https://data.occrp.org/api/2'
paths:  
  /collections:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionsResponse'
          description: OK
      tags:
        - Collection
      description: >-
        Returns a list of collections matching a given query. Returns all the
        collections accessible by a user if no query is given.
      summary: List collections
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
      tags:
        - Collection
      description: Create a collection with the given metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreateSchema'
      summary: Create a collection
  '/collections/{collection_id}':
    delete:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        '204':
          description: No Content
      tags:
        - Collection
      description: Delete the collection with id `collection_id`
      summary: Delete a collection
    get:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: OK
      tags:
        - Collection
      description: Return the collection with id `collection_id`
      summary: Get a collection
  '/collections/{collection_id}/bulk':
    post:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
        - description: >-
            This will disable checksum security measures in order to allow bulk
            loading of document data.
          in: query
          name: unsafe
          schema:
            type: boolean
      responses:
        '204':
          description: No Content
      tags:
        - Collection
      description: Bulk load entities into the collection with id `collection_id`
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/EntityUpdateSchema'
              type: array
        description: Entities to be loaded.
      summary: Load entities into a collection
  '/collections/{collection_id}/ingest':
    post:
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: id of the uploaded document
                    type: integer
                  status:
                    type: string
                type: object
          description: OK
      tags:
        - Ingest
        - Collection
      description: Upload a document to a collection with id `collection_id`
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
                  description: The document to upload
                meta:
                  $ref: '#/components/schemas/DocumentCreateSchema'
      summary: Upload a document to a collection
  '/collections/{collection_id}/mapping':
    post:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        '202':
          description: Accepted
      tags:
        - Collection
      description: Load the mapping for the collection with id `collection_id`
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: The mapping to apply.
        required: true
      summary: Load mappings for a collection
  '/collections/{collection_id}/process':
    post:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
        - in: query
          name: ingest
          schema:
            type: boolean
        - in: query
          name: reset
          schema:
            type: boolean
      responses:
        '202':
          description: Accepted
      tags:
        - Collection
      description: Start processing the collection with id `collection_id`
      summary: Process a collection
  '/collections/{collection_id}/status':
    delete:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatus'
          description: OK
      tags:
        - Collection
      description: Cancel all queued tasks for the collection with id `collection_id`
      summary: Cancel processing of a collection
    get:
      parameters:
        - description: The collection ID.
          in: path
          name: collection_id
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatus'
          description: OK
      tags:
        - Collection
      description: Return the task queue status for the collection with id `collection_id`
      summary: Check processing status of a collection
  '/collections/{collection_id}/xref':
    get:
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XrefCollectionResponse'
          description: OK
      tags:
        - Xref
        - Collection
      description: >-
        Fetch cross-reference matches grouped by collection, for entities in the
        collection with id `collection_id`
      summary: Fetch cross-reference matches
    post:
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: integer
      responses:
        '202':
          content:
            application/json:
              schema:
                properties:
                  status:
                    description: accepted
                    type: string
                type: object
          description: Accepted
      tags:
        - Xref
        - Collection
      description: Generate cross-reference matches for entities in a collection.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XrefSchema'
      summary: Generate cross-reference matches
  '/collections/{collection_id}/xref/export':
    get:
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: {}
          description: OK
      tags:
        - Xref
        - Collection
      description: Download results of cross-referencing as an excel file
      summary: Download cross-reference results
  '/collections/{collection_id}/xref/{other_collection_id}':
    get:
      parameters:
        - in: path
          name: collection_id
          required: true
          schema:
            type: integer
        - in: path
          name: other_collection_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XrefResponse'
          description: OK
      tags:
        - Xref
        - Collection
      description: >-
        Fetch cross-reference matches between 2 collections with ids
        `collection_id` and `other_collection_id`
      summary: Fetch cross-reference matches between collections
  /entities:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Resturns the created entity
      tags:
        - Entity
      description: >-
        Create an entity in a collection with a given schema and a set of given
        properties.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreateSchema'
      summary: Create an entity in a collection
  '/entities/{entity_id}':
    delete:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - Entity
      description: Delete the entity with id `entity_id`
      summary: Delete an entity
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: OK
      tags:
        - Entity
      description: Return the entity with id `entity_id`
      summary: Get an entity
    post:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: OK
      tags:
        - Entity
      description: Update the entity with id `entity_id`
      requestBody:
        content:
          application/json:
            schema:
              properties:
                properties:
                  type: object
                schema:
                  type: string
              type: object
      summary: Update an entity
  '/entities/{entity_id}/content':
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  headers:
                    type: object
                  html:
                    type: string
                  text:
                    type: string
                type: object
          description: OK
        '404':
          description: Not Found
      tags:
        - Entity
      description: Return the text and/or html content of the entity with id `entity_id`
      summary: Get the content of an entity
  '/entities/{entity_id}/references':
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesResponse'
          description: OK
      tags:
        - Entity
      description: >-
        Get the schema-wise aggregation of references to the entity with id
        `entity_id`
      summary: Get entity references
  '/entities/{entity_id}/similar':
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
        - in: query
          name: 'filter:schema'
          schema:
            items:
              type: string
            type: array
        - in: query
          name: 'filter:schemata'
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
          description: Resturns a list of entities in result
      tags:
        - Entity
      description: Get a list of similar entities to the entity with id `entity_id`
      summary: Get similar entities
  '/entities/{entity_id}/tags':
    get:
      parameters:
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
          description: OK
      tags:
        - Entity
      description: >-
        Get tags for the entity with id `entity_id`. Tags include the query
        string to make a search by that particular tag.
      summary: Get entity tags
  /match:
    post:
      parameters:
        - in: query
          name: collection_ids
          schema:
            items:
              type: string
            type: array
        - in: query
          name: 'filter:schema'
          schema:
            items:
              type: string
            type: array
        - in: query
          name: 'filter:schemata'
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
          description: Returns a list of entities in result
      tags:
        - Entity
      description: >-
        Query for similar entities matching a given entity inside a given list
        of collections.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                properties:
                  type: object
                schema:
                  type: string
              required:
                - schema
              type: object
      summary: Query for similar entities
  /search:
    get:
      parameters:
        - description: >-
            A query string in ElasticSearch query syntax. Can include field
            searches, such as `title:penguin`
          in: query
          name: q
          schema:
            type: string
        - description: >-
            Return facet values for the given metadata field, such as
            `languages`, `countries`, `mime_type` or `extension`. This can be
            specified multiple times for more than one facet to be added.
          in: query
          name: facet
          schema:
            type: string
        - description: >
            Filter the results by the given field. This is useful when used in
            conjunction with facet to create a drill-down mechanism. Useful
            fields are:

            - `collection_id`, documents belonging to a particular collection.

            - `title`, of the document.

            - `file_name`, of the source file.

            - `source_url`, URL of the source file.

            - `extension`, file extension of the source file.

            - `languages`, in the document.

            - `countries`, associated with the document.

            - `keywords`, from the document.

            - `emails`, email addresses mentioned in the document.

            - `domains`, websites mentioned in the document.

            - `phone_numbers`, mentioned in the document.

            - `dates`, in any of the following formats: yyyy-MM-dd, yyyy-MM,
            yyyy-MM-d, yyyy-M, yyyy

            - `mime_type`, of the source file.

            - `author`, according to the source file's metadata.

            - `summary`, of the document.

            - `text`, entire text extracted from the document.

            - `created_at`, when the document was added to aleph (yyyy-mm
            -ddThh:ii:ss.uuuuuu).

            - `updated_at`, when the document was modified in aleph (yyyy
            -mm-ddThh:ii:ss.uuuuuu).
          in: query
          name: 'filter:{field_name}'
          schema:
            type: string
        - description: 'The number of results to return, max. 10,000.'
          in: query
          name: limit
          schema:
            type: integer
        - description: The number of results to skip at the beginning of the result set.
          in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
          description: Resturns a list of entities in result
      tags:
        - Entity
      description: >
        Returns a list of entities matching the given search criteria.


        By default, all queries will return a facet of the collections for which
        matching documents/entities have been found.

        A filter can be applied to show only results from a particular
        collection: `?filter:collection_id={collection_id}`.


        If you know you only want to search documents (unstructured, ingested
        data) or entities (structured data which may

        have been extracted from a dataset, or entered by a human) you can use
        these arguments with the `/documents`

        or `/entities` endpoints.
      summary: Search entities
  /search/export:
    get:
      parameters:
        - description: >-
            A query string in ElasticSearch query syntax. Can include field
            searches, such as `title:penguin`
          in: query
          name: q
          schema:
            type: string
        - description: >-
            Return facet values for the given metadata field, such as
            `languages`, `countries`, `mime_type` or `extension`. This can be
            specified multiple times for more than one facet to be added.
          in: query
          name: facet
          schema:
            type: string
        - description: >
            Filter the results by the given field. This is useful when used in
            conjunction with facet to create a drill-down mechanism. Useful
            fields are:

            - `collection_id`, documents belonging to a particular collection.

            - `title`, of the document.

            - `file_name`, of the source file.

            - `source_url`, URL of the source file.

            - `extension`, file extension of the source file.

            - `languages`, in the document.

            - `countries`, associated with the document.

            - `keywords`, from the document.

            - `emails`, email addresses mentioned in the document.

            - `domains`, websites mentioned in the document.

            - `phones`, mentioned in the document.

            - `dates`, in any of the following formats: yyyy-MM-dd, yyyy-MM,
            yyyy-MM-d, yyyy-M, yyyy

            - `mime_type`, of the source file.

            - `author`, according to the source file's metadata.

            - `summary`, of the document.

            - `text`, entire text extracted from the document.

            - `created_at`, when the document was added to aleph (yyyy-mm
            -ddThh:ii:ss.uuuuuu).

            - `updated_at`, when the document was modified in aleph (yyyy
            -mm-ddThh:ii:ss.uuuuuu).
          in: query
          name: 'filter:{field_name}'
          schema:
            type: string
        - description: 'The number of results to return, max. 10,000.'
          in: query
          name: limit
          schema:
            type: integer
        - description: The number of results to skip at the beginning of the result set.
          in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: OK
      tags:
        - Entity
      description: >-
        Downloads all the results of a search as a zip archive; upto a max of
        10,000 results. Supports the same query parameters as
        [`/search`](#/paths/~1search/get).
      summary: Download the results of a search
tags:
  - description: |
      Create and manage alerts.
    name: Alert
    x-displayName: Alerts API
  - description: |
      Download blobs from the archive.
    name: Archive
    x-displayName: Archive API
  - description: |
      Create and manage collections.
    name: Collection
    x-displayName: Collections API
  - description: |
      Cross-reference entities of a collection with other collections.
    name: Xref
    x-displayName: Cross-reference API
  - description: |
      Search, create and manage entities.
    name: Entity
    x-displayName: Entities and Search API
  - description: |
      List authorization groups
    name: Group
    x-displayName: Groups API
  - description: |
      Upload documents to a collection.
    name: Ingest
    x-displayName: Ingest API
  - description: |
      Fetch and manage notifications
    name: Notification
    x-displayName: Notifications API
  - description: |
      Fetch and manage permissions on a collection
    name: Permission
    x-displayName: Permissions API
  - description: |
      Fetch and delete query logs
    name: Query Log
    x-displayName: Query Log API
  - description: |
      Get an overview of ongoing tasks
    name: Status
    x-displayName: System Status API
externalDocs:
  description: 'Find out more about Aleph, a suite of data analysis tools for investigators.'
  url: 'https://docs.alephdata.org/'

