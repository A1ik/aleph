# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: geoextract.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='geoextract.proto',
  package='alephclient',
  syntax='proto3',
  serialized_pb=_b('\n\x10geoextract.proto\x12\x0b\x61lephclient\"\'\n\x04Text\x12\x0c\n\x04text\x18\x01 \x01(\t\x12\x11\n\tlanguages\x18\x02 \x03(\t\" \n\x0b\x43ountryTags\x12\x11\n\tcountries\x18\x01 \x03(\t2O\n\nGeoExtract\x12\x41\n\x10\x45xtractCountries\x12\x11.alephclient.Text\x1a\x18.alephclient.CountryTags(\x01\x62\x06proto3')
)




_TEXT = _descriptor.Descriptor(
  name='Text',
  full_name='alephclient.Text',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='alephclient.Text.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='languages', full_name='alephclient.Text.languages', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=33,
  serialized_end=72,
)


_COUNTRYTAGS = _descriptor.Descriptor(
  name='CountryTags',
  full_name='alephclient.CountryTags',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='countries', full_name='alephclient.CountryTags.countries', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=74,
  serialized_end=106,
)

DESCRIPTOR.message_types_by_name['Text'] = _TEXT
DESCRIPTOR.message_types_by_name['CountryTags'] = _COUNTRYTAGS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Text = _reflection.GeneratedProtocolMessageType('Text', (_message.Message,), dict(
  DESCRIPTOR = _TEXT,
  __module__ = 'geoextract_pb2'
  # @@protoc_insertion_point(class_scope:alephclient.Text)
  ))
_sym_db.RegisterMessage(Text)

CountryTags = _reflection.GeneratedProtocolMessageType('CountryTags', (_message.Message,), dict(
  DESCRIPTOR = _COUNTRYTAGS,
  __module__ = 'geoextract_pb2'
  # @@protoc_insertion_point(class_scope:alephclient.CountryTags)
  ))
_sym_db.RegisterMessage(CountryTags)



_GEOEXTRACT = _descriptor.ServiceDescriptor(
  name='GeoExtract',
  full_name='alephclient.GeoExtract',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=108,
  serialized_end=187,
  methods=[
  _descriptor.MethodDescriptor(
    name='ExtractCountries',
    full_name='alephclient.GeoExtract.ExtractCountries',
    index=0,
    containing_service=None,
    input_type=_TEXT,
    output_type=_COUNTRYTAGS,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_GEOEXTRACT)

DESCRIPTOR.services_by_name['GeoExtract'] = _GEOEXTRACT

# @@protoc_insertion_point(module_scope)
